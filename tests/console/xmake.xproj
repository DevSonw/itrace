[
    -- get configs
    local configs = import("configs")
    assert(configs)

    -- dump configs
--    for k, v in pairs(configs) do
--        print(k, v)
--    end

    -- the custom script
    function add(a, b)
        return a + b
    end
]
project: console
{
    # the modes
    modes: debug 
    {
        defines: DEBUG=1
    }

    modes: release, profile 
    {
        defines: DEBUG=0
    }

    target: hello1
    {
        kind:           static
        files:          src/hello1/*.c
    }

    target: hello2
    {
        kind:           shared
        files:          $(projectdir)/src/hello2/*.c
    }

    target: hello3
    {
        kind:           static
        files:          src/hello3/*.c 
        headers:        src/hello3/*.h
        headerdir:      $(buildir)/inc
        targetdir:      $(buildir)/lib
        objectdir:      $(buildir)/obj
    }

    target: demo_c
    {
        kind:           binary
        deps:           hello1 
        files:          src/demo/*.c
        links:          hello1
        linkdirs:       src/hello1
        includedirs:    src/hello1
        cflags:         -DHELLO1

        # the modes
        modes: release 
        {
            defines: NDEBUG
        }
    }

    target: demo_cpp
    {
        kind:           binary
        deps:           hello2 
        files:          src/demo/*.cpp 
        links:          hello2 
        linkdirs:       src/hello2 
        includedirs:    src/hello2 
        cxxflags:       -DHELLO1 
    }

    target: demo_objc
    {
        kind:           binary
        deps:           hello3 
        files:          src/demo/*.m 
        links:          hello3 
        linkdirs:       $(buildir)/lib 
        includedirs:    $(buildir)/inc 
        mflags:         -DHELLO3, -DPLAT="macosx", -DARCH='armv7, arm64', -DVERSION=[return add(1, 2)] 
    }

    target: demo_objcpp
    {
        kind:           binary
        deps:           hello3 
        files:          src/demo/*.mm 
        mxflags:        -DHELLO3 
        ldflags:        -lhello3, -lhello3, -L$(buildir)/lib 

        # the linux platform
        platforms: linux 
        {
            defines:    PLAT="linux"
        }

        platforms: windows 
        {
            defines:    PLAT=windows
        }

        platforms: macosx, ios 
        {
			ldflags:    -framework Cocoa, "-framework IOKit"
                   ,    -framework UIKit
                   ,    -framework CoreFoundation
        }
    }
}
            
